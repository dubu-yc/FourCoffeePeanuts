jesseX -- 2021-10-28 22:06
In design.pdf:
- Made the program components section more specific
- Cleared up how we would implement a stories list in the users table
- Delegated tasks amongst our group
- Added flask and html file specification section

elizaK -- 2021-10-30 15:38
In __init__.py
- configured the basic stuff so the mainpage opens
- created routes for login, create_account that
take you to forms to do those things
- created routes for handling submission of login
or create_account and wrote pseudocode for the steps
necessary to have those working
In templates
- created templates folder
- made main_page.html which just renders the root
route and has links that take you to login/create
- made login_create.html which conditionally
renders the different forms to log in or make
account because this way there are fewer files
Next steps :)
1. Create the 2 databases in design doc
2. Configure the submit functions that now have
pseudocode
3. Configure sessions

jesseX -- 2021-10-30 22:40
In __init__.py
- Created db file that contains user and stories table
- Added to user table with username and password entered in login_create form
- Checks whether or not username is already taken, and outputs error if it is
- Checks whether or not the passwords match in user creation, and outputs error if they do not
- Changed input type to password for password parameters
- Commented out submit_login so the python file can run currently
Next steps
1. Configure submit_login function
2. Configure sessions
3. Begin story creation

yayingLL -- 2021-11-01 01:03
In __init__.py
- Added submit_login() method
- Compares if username and password inputted matches with the information in the users database; if it does, takes user to logged-in page; if it doesn't, displays respective error message
- Added error() method, which takes in which_error as a parameter; which_error tells which error to display in the HTML file
Next steps
1. Configure sessions
2. Begin story creation
3. Fix up HTML templates

yayingLL and jesseX -- 2021-11-01 09:20
In __init__.py
- Removed error method in favor of adding errors messages through variable in html file
- Saves session when logging in
- Added dashboard page with logout button
In templates
- Added html file for dashboard (logged_in.html)
Next steps
1. Continue to configure sessions
2. Add story creation page and button in dashboard
3. Fix up HTML templates

jesseX -- 2021-11-01 18:47
In __init__.py
- Added username global variable to save username if there is a user logged in
- Pops out session when logout button is pressed
- Redirects to dashboard on main page if user is logged in
- Error generated if username or password is blank
Next steps
1. Add story creation page and button in dashboard
2. Fix up HTML templates
3. Add story search functionality/ see stories from dashboard

elizaK -- 2021-11-02 11:53
In __init__.py
- added try except blocks so that the login functions never crash
- added functions in python to handle and redirect those submissions
- problem: the new submission isn't post so the function doesn't
get the title and story from the form for some reason
In templates (create_story.html, dashboard.html)
- made logout dashboard instead and have the submit login and create
account functions redirect to the dashboard
- added button to dashboard to create story that takes user to create_story.html
where they can submit a story
Next steps
1. Figure out the form submission after you submit create story
2. Add the information to the database when you submit
3. Add story search functionality/ see stories from dashboard (later)

ryanW -- 2021-11-02 22:50
Bug about method=POST
    In __init__.py
    - submit_create_story() had a bug where method was not POST,
      so the conditional couldn't run
    In create_story.html
    - solved this bug by specifying the method as POST in the form
Adding Story Entries into stories table
    In __init__.py
    - added the functionality to insert into stories table in submit_create_story()
      which is utilized in create_story.html
    In create_story.html
    - the button can insert into stories table.
    In dashboard.html
    - After logging in, the user can see all the stories in a table.
Next steps
1. Add better logic for getting same title in stories tables for create story.
2. There should be a link to read (for stories table)
3. For now, the user cannot update the stories they see in the table in dashboard.html.
   We need to add a button/link to each story that can do that. This is a different
   page from dashboard.html. This page should show title, preview of latest update,
   and have an add button.
4. Home button
5. Design Doc should be updated and very clear

jesseX -- 2021-11-03 21:12
In __init__.py
- resolved issue with checking to see if story name is already taken
- amended logic for when checking to see if user name is already taken/ exists
- Configured sessions for story generation and other pages
- Added the stories that the user creates to the stories column of a user in the database
Next steps
1. There should be a link to read (for stories table)
2. For now, the user cannot update the stories they see in the table in dashboard.html.
   We need to add a button/link to each story that can do that. This is a different
   page from dashboard.html. This page should show title, preview of latest update,
   and have an add button.
3. Home button
4. Design Doc should be updated and very clear

elizaK -- 2021-11-03 22:25
In __init__.py
- created a /full_story route that renders the full story
template and prints the full story of the text
- if the method isn't post, then just render that there was
an error
In dashboard.html
- changed loop structure so instead of the entire text,
there is now a button that leads the user to a new page
/full_story that contains the text
In full_story.html
- prints the entire story text of the proper story that
was clicked in dashboard
- still contains the logout button
Next steps
1. For now, the user cannot update the stories they see in the table in dashboard.html.
   We need to add a button/link to each story that can do that. This is a different
   page from dashboard.html. This page should show title, preview of latest update,
   and have an add button.
2. Home button
3. Design Doc should be updated and very clear

ryanW -- 2021-11-03 23:00
Allowed title to show up in /full_story
  - added an extra <input> in dashboard.html
  - added an extra story_title variable in full_story.html
  - assigned that variable when calling render_template() in __init__.py line 193
Changed how the "users" table keeps track of stories the user created
  - now we track of their created stories using title instead of full story
Next steps
1. The "Stories List Below (added/contributed to, cannot update)" should only show the
  stories that the user added/contributed. if user catscats has one story contribution
  (titled "Coffee") then catscats should only be able to see story titled "Coffee"
  in this list.
2. unique titles should be case-insensitive and remove spaces at beginning and end
  (e.g. " COFFEE   " and "coffee" are the same)
3. We need the other table/page where users can see stories that they have NOT created
  or contributed to. They should be able to see the title, a preview of latest update,
  and a button to bring them to a page where they can add a latest update
  (at this new page they should be able to see title + latest update)
4. Home button
5. Design Doc should be updated and very clear

yayingLL -- 2021-11-04 00:06
-added See_Stories button in dashboard and see_stories html file corresponding to it
-if user clicks on See_Stories, user is directed to page where they can see the Title and Preview of story
Next steps
1. The "Stories List Below (added/contributed to, cannot update)" should only show the
  stories that the user added/contributed. if user catscats has one story contribution
  (titled "Coffee") then catscats should only be able to see story titled "Coffee"
  in this list.
2. unique titles should be case-insensitive and remove spaces at beginning and end
  (e.g. " COFFEE   " and "coffee" are the same)
*3. see_stories page has to have functional button that brings user to a page where they can edit the story
(at this page, the user should be able to see title + latest update, then a box where they can add update);
-optionally, see_stories shouldn't display the stories the user already contributed to
4. Home button
5. Design Doc should be updated and very clear

ryanW -- 2021-11-04 19:17
Made sure the functionality of the "Stories List Below" works
  in dashboard.html
  - Greeting to user
  - Tell user how many story contributions they have
    - takes into account singular/plural and cleaned error where 0 stories
      stil displays correctly (!)
  - Title and Latest Update are now in separate columns
Next steps
1. unique titles should be case-insensitive and remove spaces at beginning and end
  (e.g. " COFFEE   " and "coffee" are the same)
*2. see_stories page has to have functional button that brings user to a page where they can edit the story
(at this page, the user should be able to see title + latest update, then a box where they can add update);
-optionally, see_stories shouldn't display the stories the user already contributed to
(not really optional XD)
3. Home button
4. Design Doc should be updated and very clear

jesseX -- 2021-11-04 22:06
In __init__.py
- checks to see if the story name is taken but now excludes whitespace at beginning and end, also is now case insensitive
- added dashboard button to see stories and edit story
- added route to edit_story.html that has a text box for edits to be made as well as the title and preview
- outlined submit edit story
In templates
- edited see_stories.html to have hidden parameters to send data of story to edit_story.html
- added edit_story.html
Next steps
1. fill out function to submit edits and add to database
2. Add a home button
3. Edit/amend design doc with changes
4. Update see stories to have search and/or randomly generate them

yayingLL -- 2021-11-04 23:49
In __init__.py/see_stories
-attempted to add functionality to see_stories where stories the user hasn't added to appears on page
  -plan: get all the stories that don't correspond to the logged_in_user, get their information from the stories database, and display this info on page
Next steps
1. fill out function to submit edits and add to database
2. Add a home button
3. Edit/amend design doc with changes
4. Update see stories to have search and/or randomly generate them
5. fix see_stories so the stories the user hasn't added to show up - right now, only characters from the stories are showing up - indexing error?

ryanW -- 2021-11-05 00:00
In dashboard.html
  - Added both "all stories list" and "users" list for debugging
  - Put some ASCII art for fun
  - Moved the 3 buttons to top right
  - Made sure "See Stories Button" works
In see_stories() in __init__.py
  - did some logic with some lists 
  - it returns a list of stories that the user did NOT contribute to, to see_stories.html
    so that it show the stories
Next steps
1. fill out function to submit edits and add to database
2. Add a home button
3. Edit/amend design doc with changes
4. Update see stories to have search and/or randomly generate them

elizaK -- 2021-11-05 01:59
In full_story.html, see_stories.html, create_story.html, edit_story.html
- added a return to dashboard button (note: is this the home button? I think so)
In edit_story.html
- discovered that to make it a post method, you have to do 
method = post bc otherwise it might not work
- added an error if for some reason submission doesn't work
In __init__.py
- created the /submit_edit_story route which takes the post
from edit_story.html and updates the database with the correct
info and then takes you back to the dashboard
- if that doesn't work for some reason, it will return an error 
- added the session stuff to the new functions
- added the title that was updated to the list of stories
a specific user has edited so it shows up on the edited stories
page
Next steps:
1. Edit/amend design doc with changes
2. Update see stories to have search and/or randomly generate them

ryanW -- 2021-11-06 00:00
In see_stories() in __init__.py:
- BUG: c.execute("SELECT stories FROM users WHERE username != (?)", (logged_in_user,))
    Say logged_in_user is user1, and there is a user2 and user3.
    This code selects stories that user2 and user3 contributed to. 
    However, this might include stories user1 contributed to, if user1 contributed to a story of user2 or user3.
- BUG FIX: Thus, we need to get the user2 and user3 stories then remove user1 stories.
  (It has been done, with the help of flatten_and_clean())
In __init__.py (search_see_stories()) and see_stories.html
- created the beginnings of a search button
Next steps
1. Edit/amend design doc with changes
2. Finish the search button*
3. Add more buttons for navigation*
*optional
    
